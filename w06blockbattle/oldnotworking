//package blockbattle
import java.awt.Color as JColor

object Game:
    val windowSize = (30, 50)
    val windowTitle = "EPICALLY COOL BLOCK BATTLE"
    val blockSize = 14
    val skyRange = 0 to 7
    val grassRange = 8 to 8

    object Color { 
        val black = new JColor(0, 0, 0) 
        val mole = new JColor(51, 51, 0)
        val soil = new JColor(153, 102, 51)
        val tunnel = new JColor(204, 153, 102)
        val grass = new JColor(25, 130, 35)
        val sky = new JColor(30, 200, 255)//(0, 0, 255) 
    }

    /** Used with the different ranges and eraseBlocks */
    def backgroundColorAtDepth(y: Int): java.awt.Color = ???

class Game(
    val leftPlayerName: String = "LEFT",
    val rightPlayerName: String = "RIGHT"  
):

    import Game._ // direkt tillgång till namn på medlemmar i kompanjon

    val window = new BlockWindow(windowSize, windowTitle, blockSize)
    val leftMole: Mole = new Mole(
    "LEFT",
    Pos(5, 25),
    (1, 0),
    Color.mole,
    KeyControl(right="d",left="a",up="w",down="s")
    )

    val rightMole: Mole = new Mole(
    "RIGHT",
    Pos(25, 25),
    (-1, 0),
    Color.mole,
    KeyControl(right = "Right", left = "Left", up = "Up", down = "Down")
    )

    def drawWorld(): Unit = {

        window.setBlock(leftMole.pos, Color.mole)
        window.setBlock(rightMole.pos, Color.black)


        def rectangle(leftTop: Pos)(size: Pos)(color: JColor) = {
            for (y <- leftTop.y to size._2 ) {
                for (x <- leftTop.x to size._1){
                window.setBlock(Pos(x, y), color)
                }
            }
        }

        rectangle(Pos(0, 0))(Pos(30, 7))(Color.sky) 
        rectangle(Pos(0, 7))(Pos(30, 10))(Color.grass)
        rectangle(Pos(0, 10))(Pos(30, 50))(Color.soil)
        
    }
    

    /** Use to erase old points, e.g updated score */
    def eraseBlocks(x1: Int, y1: Int, x2: Int, y2: Int): Unit = ???

    def update(mole: Mole): Unit = { // update, draw new, erase old
        window.setBlock(mole.nextPos, Color.mole) // draw new
        window.setBlock(mole.pos, Color.tunnel) // erase old
        mole.move() // update
    } 

    def gameLoop(): Unit = {
        var quit = false
        val delayMillis = 80

        def handleEvents(): Unit = {
            var e = window.nextEvent()

            while (e != BlockWindow.Event.Undefined) {
                e match {
                    case BlockWindow.Event.KeyPressed(key) => // ändra riktning på resp. mullvad
                        leftMole.setDir(key)
                        rightMole.setDir(key)
                        
                        /**
                        if (leftMole.keyControl.has(key))
                            leftMole.setDir(key)
                        else if (rightMole.keyControl.has(key))
                            rightMole.setDir(key) 
                        **/
                    case BlockWindow.Event.WindowClosed =>
                        quit == true // avsluta spel-loopen
                }
                e = window.nextEvent()
            }
        }

        def gameLoop(): Unit = {
            while(!quit) {
                val t0 = System.currentTimeMillis
                handleEvents() // ändrar riktning vid tangenttryck etc.
                update(leftMole) // flyttar, ritar, suddar, etc.
                update(rightMole)

                val elapsedMillis = (System.currentTimeMillis - t0).toInt
                Thread.sleep((delayMillis - elapsedMillis) max 0)
            }
        }
    }

    def start(): Unit =
        println("Start digging!")
        println(s"$leftPlayerName ${leftMole.keyControl}")
        println(s"$rightPlayerName ${rightMole.keyControl}")
        drawWorld()
        gameLoop()
