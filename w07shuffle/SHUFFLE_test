def SHUFFLE(xs: Array[Int]): Array[Int] = {
    val array = new Array[Int] (xs.length)
    val random = new scala.util.Random
         
    for (n <- array.length - 1 to 0 by -1) do
        val k = random.nextInt(n + 1)
        println(k)
        array(n) = xs(k)
    array
}




def shuffle[@specialized(Double) T](array: Array[T], swap: (T, T) => (T, T) = { (a: T, b: T) => (b, a) }): Array[T] = {
  val random = new scala.util.Random

  for (n <- array.length - 1 to 0 by -1) {
    val k = random.nextInt(n + 1)
    val (a, b) = swap(array(k), array(n)); array(k) = a; array(n) = b
  }

  array
}

def shuffle(array: Array[Int], swap: (Int, Int) => (Int, Int) = { (a: Int, b: Int) => (b, a) }): Array[Int] = {
  val random = new scala.util.Random

  for (n <- array.length - 1 to 0 by -1) {
    val k = random.nextInt(n + 1)
    val (a, b) = swap(array(k), array(n)); array(k) = a; array(n) = b
  }

  array
}

def swap(a: Int, b: Int) = { 
  (a: Int, b: Int) => (b, a) 
}